---
title: "Principal Component Analysis"
author: "Shivani"
format: html
course: STA 6257 - Advanced Statistical Modeling
editor: visual
---

**Dataset**

Each record is for 100 grams.

The nutrient columns end with the units, so:

Nutrient_g is in grams Nutrient_mg is in milligrams Nutrient_mcg is in micrograms Nutrient_USRDA is in percentage of US Recommended Daily Allows (e.g. 0.50 is 50%)

#Install Libraries

```{r}
#install.packages("devtools")
#library(devtools)
#install_version("MASS", version = "7.3-60")  # Replace with a compatible version

#install.packages("MASS")
```

**Check for highly correlated features**

Removing _USRD records as the data is redundant and also selecting highly corrrelated data.

```{r}
library(MASS)
library(factoextra)
library(ggplot2)
library(readr)

library(dplyr)
library(caret)
library(tibble)

url <- "https://query.data.world/s/ll77ildgnhhove7mlker3g2jw7z5qr?dws=00000"
data <- read.csv(url, header=TRUE, stringsAsFactors=FALSE)
str(data)
summary(data)

```

```{r}
data_omit_usrda <- data %>% dplyr::select(-contains('_USRDA'))

str(data_omit_usrda)

data_numeric <- data_omit_usrda %>% dplyr::select(where(is.numeric))

df <- data_numeric %>% column_to_rownames('ID')
df_desc <- df[, 1:6]
data_numeric <- df[, -c(1:6)]
print(data_numeric, 15)

```


**Scale Data**

-   Scale data to center and/or scale the columns of a numeric dataframe.
-   Standardize variables to have a mean of zero and a standard deviation of one

```{r}
data_scaled <- scale(data_numeric)
names(data_numeric)

#print(data_scaled)
cat("mean:", round(mean(data_scaled), 2), "\n")
cat("standard dev:", round(sd(data_scaled), 2), "\n")

```

**Corelation check**

- Check if features in the data are correlated


```{r}
cor(data_scaled)
mean(cor(data_scaled))

```


**Apply Prinicipal Component Analysis**

- Running PCA generated multiple Principal components

- Number of Principal components will be equal to number of variables in the data.    

- First few components will be important.

```{r}
pca <- prcomp(data_scaled, scale = TRUE)

pca$rotation


```

```{r}
#qplot(1:length(pca$sdev^2), pca$sdev^2 / sum(pca$sdev^2), geom="line")

```

```{r}
explained_variance <- pca$sdev^2 / sum(pca$sdev^2)
cat(explained_variance, "\n")
cat(sum(explained_variance[1:6]), "\n")
```

**Scree Plot**

-   The scree plot shows the proportion of variance explained by each principal component.
-   This plot helps in deciding how many components to retain for further analysis.
-   First seven components explain most of the variance, (\> 70%)

```{r}
# Visualize the PCA results
fviz_eig(pca, addlabels = TRUE, ylim = c(0, 50))

```


**BiPlot**

```{r}

col_unique <- as.character(data$FoodGroup)

color_values <- setNames(rainbow(length(unique(col_unique))), unique(col_unique))


fviz_pca_biplot(pca, geom.ind = "point", pointsize = 2.5 , col.var = "black" ,
                col.ind =col_unique ,  repel = TRUE)+
  scale_color_manual(name = "Food Groups", labels = unique(col_unique), values = color_values)
```


**Visualization**

Now let's look at which food groups are highest in each component

```{r}
pca_results <- as.data.frame(pca$x)
pca_results$FoodGroup <- data$FoodGroup

plot_top_foodgroups <- function(pca_results, component, n = 10) {
  top_foodgroups <- pca_results %>%
    arrange(desc(!!sym(component))) %>%
    slice(1:n) %>%
    count(FoodGroup, sort = TRUE)
  
  ggplot(top_foodgroups, aes(x = reorder(FoodGroup, n), y = n)) +
    geom_bar(stat = "identity") +
    coord_flip() +
    labs(title = paste("Top Food Groups for", component),
         x = "Food Group", y = "Count")
}

```

**Creating dataset with pricipal components**

-   Creating dataset with 7 PCs

```{r}
pca_df <- as.data.frame(pca$x[, 1:7])
pca_df <- rownames_to_column(pca_df, var = "ID")
names(pca_df)
pca_new <- prcomp(pca_df[, 2:8])
#cor(pca_df[, 2:8])
#mean(cor(pca_df[, 2:8]))
fviz_pca_biplot(pca_new, geom.ind = "point", pointsize = 2.5 , col.var = "black" ,
                col.ind =col_unique ,  repel = TRUE)+
  scale_color_manual(name = "Food Groups", labels = unique(col_unique), values = color_values)

```

**Analysis of PCA Components**

PC1

```{r}
  component <- paste0("PC", 1)
  print(plot_top_foodgroups(pca_results, component))

```

---

PC2

```{r}
  component <- paste0("PC", 2)
  print(plot_top_foodgroups(pca_results, component))

```
---


Foods that are high in: VitC and Manganese

Low in: Niacin_mg Riboflavin_mg

```{r}
vects <- pca$rotation[, 1:5]
component_one <- vects[, 1]
print(sort(component_one, decreasing = TRUE))

```

Foods that are high in: VitA and VitB12

Low in: Folate and Thiamin

```{r}

component_two <- vects[, 2]
print(sort(component_two, decreasing = TRUE))

```


**Summary**

Dimensionality Reduction:

-   By reducing the dataset to a few principal components, this helps in simplifying the dataset while retaining most of the important information.

Top Contributing Food Groups:

-   The bar plots for each of the first five principal components indicate which food groups are most influential in each component. 

-   This helps in understanding the underlying structure of the data and identifying patterns or groups of foods that are similar in their nutritional profiles.

